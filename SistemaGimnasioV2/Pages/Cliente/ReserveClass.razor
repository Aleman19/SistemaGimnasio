@page "/Cliente/ReserveClass"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using SistemaGimnasioV2.Data
@using SistemaGimnasioV2.Models
@inject GymDbContext DbContext
@inject AuthenticationStateProvider AuthStateProvider
@using static System.Net.WebRequestMethods
@inject NavigationManager NavigationManager

<h3>Reservar Clase</h3>

@if (isLoading)
{
    <div class="alert alert-info">Cargando clases disponibles...</div>
}
else if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (classSchedules.Any())
{
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>Clase</th>
                <th>Entrenador</th>
                <th>Fecha</th>
                <th>Hora de Inicio</th>
                <th>Hora de Finalización</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var schedule in classSchedules)
            {
                <tr>
                    <td>@(schedule.Class?.Name ?? "Clase no asignada")</td> <!-- Verificación de null -->
                    <td>@(schedule.Trainer?.FullName ?? "Entrenador no asignado")</td> <!-- Nombre completo del entrenador -->
                    <td>@schedule.Date.ToString("dd/MM/yyyy")</td>
                    <td>@schedule.StartTime.ToString(@"hh\:mm")</td>
                    <td>@schedule.EndTime.ToString(@"hh\:mm")</td>
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="() => Reserve(schedule.Id)">
                            <i class="bi bi-check-circle"></i> Reservar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div class="alert alert-warning">No hay clases disponibles para reservar.</div>
}

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success mt-3">@successMessage</div>
}

@code {
    private List<ClassSchedule> classSchedules = new(); // Lista de horarios disponibles
    private string successMessage = string.Empty; // Mensaje de éxito
    private string? errorMessage = null; // Mensaje de error
    private bool isLoading = true; // Indicador de carga

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            // Obtener el ID del usuario autenticado
            var userIdClaim = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier);

            if (userIdClaim != null && int.TryParse(userIdClaim.Value, out int userId))
            {
                // Cargar clases no reservadas por el usuario actual
                classSchedules = await DbContext.ClassSchedules
                    .Include(cs => cs.Class)   // Carga de la relación con Class
                    .Include(cs => cs.Trainer) // Carga de la relación con Trainer
                    .Where(cs => !DbContext.Reservations.Any(r => r.UserId == userId && r.ClassScheduleId == cs.Id))
                    .ToListAsync();
            }
            else
            {
                errorMessage = "No se pudo identificar al usuario autenticado.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Ocurrió un error al cargar las clases. Intente nuevamente.";
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task Reserve(int scheduleId)
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            // Obtener el ID del usuario autenticado
            var userIdClaim = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier);

            if (userIdClaim != null && int.TryParse(userIdClaim.Value, out int userId))
            {
                // Verificar si ya existe una reserva para este horario
                var existingReservation = await DbContext.Reservations
                    .FirstOrDefaultAsync(r => r.UserId == userId && r.ClassScheduleId == scheduleId);

                if (existingReservation == null)
                {
                    // Crear una nueva reserva
                    var reservation = new Reservation
                        {
                            UserId = userId,
                            ClassScheduleId = scheduleId,
                            ReservationDate = DateTime.Now
                        };

                    DbContext.Reservations.Add(reservation);
                    await DbContext.SaveChangesAsync();

                    // Actualizar la lista de horarios disponibles
                    classSchedules = await DbContext.ClassSchedules
                        .Include(cs => cs.Class)
                        .Include(cs => cs.Trainer)
                        .Where(cs => !DbContext.Reservations.Any(r => r.UserId == userId && r.ClassScheduleId == cs.Id))
                        .ToListAsync();

                    successMessage = "Reserva realizada exitosamente.";
                }
                else
                {
                    successMessage = "Ya tienes una reserva para esta clase.";
                }
            }
            else
            {
                errorMessage = "No se pudo identificar al usuario autenticado.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Ocurrió un error al realizar la reserva. Intente nuevamente.";
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}
