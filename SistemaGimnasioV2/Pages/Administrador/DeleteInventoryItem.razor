@page "/Administrador/DeleteInventoryItem/{itemId:int}"
@using SistemaGimnasioV2.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager


<h3>Eliminar Inventario</h3>

@if (isLoading)
{
    <div class="alert alert-info">Cargando inventario...</div>
}
else if (inventoryItems.Any())
{
    <!-- Contenedor con scroll -->
    <div style="max-height: 400px; overflow-y: auto; border: 1px solid #ddd; border-radius: 5px;">
        <table class="table table-striped">
            <thead style="position: sticky; top: 0; background-color: #f8f9fa;">
                <tr>
                    <th>ID</th>
                    <th>Nombre del Item</th>
                    <th>Cantidad</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in inventoryItems)
                {
                    <tr>
                        <td>@item.Id</td>
                        <td>@item.Name</td>
                        <td>@item.Quantity</td>
                        <td>
                            <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDelete(item.Id)">
                                <i class="bi bi-trash"></i> Eliminar
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <div class="alert alert-warning">No hay elementos en el inventario.</div>
}

@if (showConfirmDialog)
{
    <div class="alert alert-danger mt-3">
        <p>¿Estás seguro de que deseas eliminar el elemento seleccionado?</p>
        <button class="btn btn-danger" @onclick="DeleteItem">Sí, Eliminar</button>
        <button class="btn btn-secondary ms-2" @onclick="CancelDelete">Cancelar</button>
    </div>
}

<div class="mt-3">
    <a href="/Entrenador/ManageInventory" class="btn btn-secondary">
        <i class="bi bi-arrow-left"></i> Volver
    </a>
</div>

@code {
    private List<InventoryItem> inventoryItems = new();
    private bool isLoading = true;
    private bool showConfirmDialog = false;
    private int itemIdToDelete;

    private bool IsDisposed = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<List<InventoryItem>>("api/Inventory");
            if (!IsDisposed) // Verificar si el componente sigue válido
            {
                inventoryItems = result ?? new List<InventoryItem>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar el inventario: {ex.Message}");
            inventoryItems = new List<InventoryItem>(); // Evita nulos
        }
        finally
        {
            if (!IsDisposed)
            {
                isLoading = false;
                StateHasChanged();
            }
        }
    }

    private void ConfirmDelete(int id)
    {
        if (!IsDisposed)
        {
            itemIdToDelete = id;
            showConfirmDialog = true;
        }
    }

    private void CancelDelete()
    {
        if (!IsDisposed)
        {
            itemIdToDelete = 0;
            showConfirmDialog = false;
        }
    }

    private async Task DeleteItem()
    {
        try
        {
            var response = await Http.DeleteAsync($"api/Inventory/Delete/{itemIdToDelete}");
            if (response.IsSuccessStatusCode && !IsDisposed)
            {
                inventoryItems = inventoryItems.Where(item => item.Id != itemIdToDelete).ToList();
                showConfirmDialog = false;
                itemIdToDelete = 0;
                StateHasChanged(); // Refresca la interfaz
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error inesperado: {ex.Message}");
        }
    }

    public void Dispose()
    {
        IsDisposed = true;
    }

    private class InventoryItem
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public int Quantity { get; set; }
    }
}
