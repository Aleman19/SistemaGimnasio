@page "/Administrador/DeleteUser/{UserId:int}"
@using SistemaGimnasioV2.Models
@using SistemaGimnasioV2.Data
@inject GymDbContext DbContext
@inject NavigationManager NavigationManager

<h3>Eliminar Usuario</h3>

<div class="card mt-4 shadow-sm">
    <div class="card-body">
        @if (isLoading)
        {
            <div class="alert alert-info">Cargando datos del usuario...</div>
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }
        else if (userToDelete != null)
        {
            <!-- Mensaje de Confirmación -->
            <div class="alert alert-warning">
                <p><strong>¿Está seguro de que desea eliminar al siguiente usuario?</strong></p>
                <ul>
                    <li><strong>Nombre:</strong> @userToDelete.FirstName @userToDelete.LastName</li>
                    <li><strong>Nombre de Usuario:</strong> @userToDelete.Username</li>
                    <li><strong>Correo Electrónico:</strong> @userToDelete.Email</li>
                    <li><strong>Rol:</strong> @userToDelete.Role</li>
                </ul>
            </div>

            <!-- Botones de Confirmar y Cancelar como Enlaces -->
            <div class="d-flex justify-content-start">
                <!-- Confirmar Eliminar -->
                <a href="/Administrador/DeleteConfirmed/@UserId" class="btn btn-danger me-2">
                    <i class="bi bi-trash"></i> Eliminar
                </a>
                <!-- Cancelar -->
                <a href="/Administrador/ManageUsers" class="btn btn-secondary">
                    <i class="bi bi-arrow-left"></i> Cancelar
                </a>
            </div>
        }
        else
        {
            <div class="alert alert-danger">El usuario no fue encontrado.</div>
        }
    </div>
</div>

@code {
    [Parameter]
    public int UserId { get; set; } // Captura el ID del usuario desde la URL

    private User? userToDelete; // Usuario que se eliminará
    private string errorMessage = string.Empty;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserAsync();
    }

    /// <summary>
    /// Cargar el usuario desde la base de datos.
    /// </summary>
    private async Task LoadUserAsync()
    {
        try
        {
            userToDelete = await DbContext.Users.FindAsync(UserId);

            if (userToDelete == null)
            {
                errorMessage = "El usuario no fue encontrado.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar el usuario: {ex.Message}");
            errorMessage = "Error al cargar los datos del usuario.";
        }
        finally
        {
            isLoading = false;
        }
    }
}
