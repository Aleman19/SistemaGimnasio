@page "/Entrenador/AddClass"
@using Microsoft.AspNetCore.Components.Forms
@using SistemaGimnasioV2.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>Agregar Nueva Clase</h3>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success">@successMessage</div>
}
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<EditForm Model="@newClass" OnValidSubmit="SubmitNewClass">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="card shadow-sm p-4">
        <!-- Nombre de la Clase -->
        <div class="form-group mb-3">
            <label for="name">Nombre de la Clase</label>
            <InputText id="name" class="form-control" @bind="newClass.Name" />
            <div class="text-danger" style="font-size: small">
                <ValidationMessage For="@(() => newClass.Name)" />
            </div>
        </div>

        <!-- Descripción -->
        <div class="form-group mb-3">
            <label for="description">Descripción</label>
            <InputTextArea id="description" class="form-control" @bind="newClass.Description" />
            <div class="text-danger" style="font-size: small">
                <ValidationMessage For="@(() => newClass.Description)" />
            </div>
        </div>

        <!-- Fecha de Inicio -->
        <div class="form-group mb-3">
            <label for="startDate">Fecha de Inicio</label>
            <InputDate id="startDate" class="form-control" @bind-Value="newClass.StartDate" TValue="DateTime" />
            <div class="text-danger" style="font-size: small">
                <ValidationMessage For="@(() => newClass.StartDate)" />
            </div>
        </div>

        <!-- Duración -->
        <div class="form-group mb-3">
            <label for="duration">Duración (en minutos)</label>
            <InputNumber id="duration" class="form-control" @bind-Value="newClass.DurationMinutes" TValue="int" />
            <div class="text-danger" style="font-size: small">
                <ValidationMessage For="@(() => newClass.DurationMinutes)" />
            </div>
        </div>


        <!-- ¿Está Activa? -->
        <div class="form-group mb-3">
            <label>¿Está Activa?</label>
            <div class="form-check">
                <InputCheckbox id="isActive" class="form-check-input" @bind="newClass.IsActive" />
                <label class="form-check-label" for="isActive">Sí</label>
            </div>
        </div>

        <!-- Botones -->
        <div class="d-flex justify-content-end">
            <button type="submit" class="btn btn-success">
                <i class="bi bi-save"></i> Guardar
            </button>
            <a href="/Entrenador/ManageClasses" class="btn btn-secondary ms-2">
                <i class="bi bi-arrow-left"></i> Cancelar
            </a>
        </div>
    </div>
</EditForm>

@code {
    private Class newClass = new();
    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;

    private async Task SubmitNewClass()
    {
        try
        {
            // Enviar los datos de la clase a la API
            var response = await Http.PostAsJsonAsync("api/Class/Add", newClass);

            if (response.IsSuccessStatusCode)
            {
                successMessage = "¡La clase fue agregada exitosamente!";
                errorMessage = string.Empty;
                newClass = new Class(); // Limpiar formulario
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error: {errorContent}";
                successMessage = string.Empty;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error inesperado: {ex.Message}";
            successMessage = string.Empty;
        }
    }
}
